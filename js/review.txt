1, javascript: 脚本语言（在html中执行） 解释性语言（js解释器） 弱类型语言  从上往下顺序解析执行（可通过函数改变）

2， javascript的实现： 一个完整的包含ECMAScript(核心)，DOM(文档对象模型),BOM(浏览器对象模型)

3， 组成成分：
1>语法
	区分大小写  标识符  注释  语句
2>类型 
	基本数据类型，引用数据类型
	基本数据类型的变量：
		可以直接操作保存在变量中的实际的值
		参数传递的时候传递的是实际值
	引用数据类型的变量：
		不能直接操作对象的内存空间，实际上是在操作对象的引用。
		可以为引用类型变量天极爱属性和方法，也可以改变和删除其属性和方法
		参数传递的时候传递的是引用地址。
	值传递
		值的拷贝
	引用传递
		引用地址的拷贝
	(1)
	5种基本数据类型（简单数据类型）--理解用法
	Undefined
	Null
	实际上 undefined 派生自null值。undefined == null 结果为 true;null与undefined用途不同，null可以用来表示一个空对象，但是没有必要把一个变量的值显式设置为undefined
	Boolean
	Number
	String 
		1)字符字面量
      		\n	换行
      		\t	制表
      		\b	退格
      		\r	回车
      		\\	斜杠
      		\'	单引号
      		\"	双引号
     	2)字符长度 	
     		通过length属性获取字符长度

	1种引用数据类型（复杂数据类型）
	Object(本质由一组无序的键值对组成)
	(2)数据类型转换--理解
		Boolean() Number() parseInt()  parseFloat() toString() String()构造函数

		null ,undefined 没有toString() 方法
	(3)typeof 操作符
	可有取值如下
	      	"undefined"		未定义
	      	"boolean"		布尔类型
	      	"string"		字符串
	      	"number"		数值
	      	"object"		对象或者null
	      	"function"		函数
3>语句
	(1)流程控制语句【分支语句】
	if语句
		if(condition){
			statement1
		}else{
			statement2
		}
	switch语句
		switch(expression){
			case val:

				break;
			case val2:

				break;
			default:
		}
	(2)循环语句
		三要素
			初始化条件
			结束判断条件
			迭代语句
		1.for语句
			for(初始化条件;结束判断条件;迭代条件){
			//循环体
			}
			死循环
			for(;;){
				//当for中的表达式省略的时候，会创建一个死循环
			}
			while(true){
			
			}
		2.do-while语句
			初始化条件
			do{
				//循环体
				循环迭代
			}while(循环结束条件判断);
			do{
			
			}while(condition);
		3.while语句
			初始化条件
			while(结束判断条件){
				//循环体
				迭代条件
			}
			while(condition){
		
			}
		4.for-in语句
			for(var propName in window){
				console.log(propName);
			}
		5.label 语句
			使用label可以在代码中添加标签，以便将来使用
			label : for(int i=0;i<10;i++){
				if(i == 5){
					break label;
				}
			}
		循环关键字
       break	跳出循环体
       continue 结束本次循环，进行下一次循环
4>关键字
5>保留字
6>操作符
	(1)一元操作符    ++（递增）,--（递减）,+(相当于调用Number()) ,-
	(2)布尔操作符，非（NOT）	逻辑非 !,逻辑与 &&,逻辑或 ||  
	(3)加性操作符（返回值都是number） + -
		拼接操作符（返回值都是字符串） 字符串+操作数
	(4)乘性操作符 * / %
	返回值为【数值类型】当操作数为非数值的时候执行自动的类型转化Number()
	(5)相等操作符，返回【Boolean】==,!= (先转换再比较) ===
	(6)赋值运算符 =
	(7)逗号操作符  可以在一条语句中执行多个操作
	(8)三目运算符 ? :
7>对象
	ECMAScript中的对象其实就是一组数据(属性)和功能(方法)的集合。
	引用数据类型（JS中内置对象有哪些）
	Object Date Function Array RegExp
	1.对象[object]
	(1)创建方式：通过构造函数创建； 通过对象字面量创建
	(2)对象属性的访问：
	 	通过点操作符访问 gf.name; 不会解析变量的
	 	通过中括号访问  gf["name"]; 会解析变量
	(3)对象属性的遍历
		for(var key in obj){
			var val = obj[key];
		}
	(4)动态添加，删除属性
	(5)属性检测 [继承，自有，可遍历]
		in
			属性 in 对象
			该属性是否是该对象的自有属性或继承属性
			name in gf		//true
			toString in gf	//true
		对象.hasOwnProperty(属性名) // 检测自有属性
		对象.properyIsEnumerrable(属性名) // 检测可枚举属性
	(6)方法的重写
	(7)对象序列化
		JSON对象
			var obj = 'JSON';
			var obj = '{"name":"terry","age":12}';
		JSON数组
			var arr = '[
				{"name":"terry","age":12},
				{"name":"terry","age":12}
			]'
	
		对象->JSON（字符串，遵循一定的标准）
		var jsonStr = JSON.stringify(obj);

		JSON->对象
		var obj = JSON.parse(jsonStr);
	(8)Object
		toString()
		valueOf()
		hasOwnProperty()
		propertyIsEnumerable()
		toLocalString()

	2.数组[Array]
		数组的本质也是对象
		数组是多个值的集合，容器
		数组中的值称为数组的元素
		数组在内存中体现为连续的内存空间
	(1)创建方式：
		1>构造函数 Array()
			无参 var arr = new Array() //创建空数组
			参数为一个整数（即指定数组长度）
			参数为多个值（创建并做初始化操作）
		2>对象字面量
			var arr =[1,2,3];
	(2)数组的长度
		数组名.length
		JS中数组的长度可以改变，JAVA不可以
	(3)属性的访问
		数组名[索引]  索引超出数组长度返回undefined
	(4)数组的遍历
		for(var key in arr){
			//key是索引
			//只能遍历显示初始化的元素
		}
		for(var i=0;i<arr.length;i++){ 
			var val=arr[i]
			}  //可以遍历未初始化的元素
		var i=0;
		while(i<arr.length){
			var val =arr[i];
			i++
		}  //可以遍历未初始化的元素
	(5)检查数组
		var arr = [];
		typeOf(arr);		//返回object
		Array.isArray(arr);	//判断arr是否是数组类型
	(6)将数组转换为字符串
		1>arr.toString() //toString被Array函数重写
		2>arr.join("连接符号")
		3>JSON.stringify(obj) //将obj转换为JSON格式的字符串
	(7)方法
	 	1>栈方法
	 	arr.push(); //将元素插入到数组的末尾;  参数：可以为多个; 返回值：入栈后数组的长度  【原数组改变】
	 	arr.pop();  //将数组从数组的末尾删除 参数：无  返回值：删除的元素【原数组改变】
	 	2>队列方法
	 	arr.shift();  //将数组的开头元素删除  参数：无  返回值：删除的元素【原数组改变】
	 	arr.unshift();  //将元素插入在数组的开头  参数：可以有多个任意数据类型  返回值：插入后数组的长度【原数组改变】  
	 	3>排序方法
	 	arr.reverse();  //反转数组中元素的位置 无参  
	 	arr.sort();  //排序  参数：a.无参：默认排序，字符序列 
	    b.比较器函数
	    	student.sort((function(param){
	    		//返回比较器函数
	    		return function(a,b){
	    			if(a[param]<b[param]){
	    				return -1;
	    			}else if(a[param]>b[param]){
	    				return 1;
	    			}
	    		}
	    	})("age")); //按照年龄升序排列
	 	4>其他方法
	 	arr.concat(); //将多个数组连接成一个数组【原数组不改变！】
	 	arr.slice(); //返回值：截取的子数组【原数组不改变！】
	 	arr.splice(); //可以实现数组的删除，插入，替换功能  返回值：删除的元素【原数组改变！】
	 	arr.indexOf();  arr.lastIndexOf(); //均使用全等操作符匹配
	 	5>迭代方法--迭代函数
	 		arr.迭代函数(回调函数，回调函数的this值)
	 		arr.forEach(function(item,index,arr){
				console.log(this);
			},{a:1});
		1.arr.forEach(function(){}); //遍历，arr中有几个元素，匿名函数执行几次
		2.arr.every(function(){ return boolean});
		3.arr.some(function(){ return boolean});
		4.arr.filter(function(){return boolean}); //当返回值为true时，将返回当前遍历的item值
		5.arr.map(function(){ return 任意值});  //可用于返回字符串连接的

	3.正则表达式[RegExp]
	(1)创建方法
		1>构造函数创建
			var pattern = new RegExp("正则表达式","修饰符");
		2>正则表达式字面量
			var pattern = /正则表达式/修饰符;
			修饰符 i ignore case 不区分大小写
				   g global 全局
				   m 多行
	(2)正则表达式对象
		var pattern = new RegExp("abc");
		pattern.exec();  //查找
		pattern.test();  //测试
		pattern.toString();  //转换成字符串
		pattern.lastIndex();  //非全局匹配模式下，lastIndex = 0;全局匹配模式下，lastIndex维护下一次检索开始位置
		pattern.source;  正则表达式文本
	(3)正则表达式
		1>直接量
		2>字符
			^用在字符类[]中，表示除了
			/[abc]/			匹配a / b / c
			/[^abc]/		匹配除了a/b/c其他任意字符
			/[a-z]/			匹配a~z
			/[0-9]/			匹配
			/\w/			[a-zA-Z0-9_]
			/\W/			[^a-zA-Z0-9_]
			/\d/			[0-9]
			/\D/			[^0-9]
			/\s/			匹配所有空格
			/\S/			匹配所有非空格
		3>表达式{数量}
			{1,2}	
			{1,}	//1或者多个
			{1}
			?	//{0，1}
			+   //{1，}
			*	//{0，}
		4>重复方式
			贪婪匹配：默认
			非贪婪匹配： {数量}?
		5>选择  /javascript|java/
		6>分组  
			1.分组结果
				exec
				/(\w+)(\d{2})/
				匹配的结果：
				["three03","three","03"]
				
				/\w+\d{2}/
				匹配的结果
				["three03"]
			2.分组的引用
				/([({])\w+\1/
				\1引用第一个表达式([({])匹配的结果
		7>开始和结束标记[用于多行模式下]
			^ 开始   $  结束
	(4)Javascript中String对正则表达式的支持   
		search()    //"JavaScript".search(/script/i); //返回4
		replace()  //text.replace(/javascript/gi,"JavaScript"); //不区分大小写将所有javascript转换为JavaScript
		match()  //"1 plus 2 equals 3".match(/\d+/g) //返回["1","2","3"]
		split()  //"1, 2, 3, 4, 5".split(/\s*,\s*/); //["1","2","3","4","5"] 允许分隔符左右两边留有空白

	4. Math对象 
    (1)常用方法
		1.比较方法
			Math.min()	求一组数中的最小值
			Math.max()	求一组数中的最大值
			Math.min(1,2,19,8,6);	//1
		2.将小数值舍入为整数的几个方法：
			Math.ceil()  向上舍入
			Math.floor() 向下舍入
			Math.round() 四舍五入
			console.log(Math.ceil(12.41));	//13
			console.log(Math.floor(12.41));	//12
			console.log(Math.round(12.3));	//12
			console.log(Math.round(12.5));	//13
		3.随机数
			Math.random() 返回大于0小于1的一个随机数
	5.函数 【面向对象的三大基本特征：封装，继承，多态】
	(1)表示方法：
	函数声明  
		function 函数名(形参列表){
			方法体
		}
	函数表达式
		var 函数名 = function(){
		
		}
	(2)函数调用
		1.函数名(实参);	
		  匿名函数(实参);
		2.方法名.call(this的值，参数列表)
		3.方法名.apply(this的值，参数数组)
		将function当作参数
		将function当作返回值【注意闭包】
			eg:多功能自定义排序函数
			function myCompare(pro){
				//函数将作为返回值返回
				return function(obj1,obj2){
					var val1 = obj1[pro];
					var val2 = obj2[pro];
					if(val1<val2){
						return -1;
					}else if(val1>val2){
						return 1;
					}else {
						return 0;
					}
				}
			}
	(3)函数的内部属性
		特征：1>在函数调用的时候，这些属性才会被初始化
			  2>只有在函数内部才能访问
		1.arguments:类数组对象，用来保存实际参数的
			length	实参的个数
			callee  指向当前函数（严格模式下不可用）
		2.this:指向的是函数赖以执行的环境对象
			1)指向当前函数的上下文（环境对象）
			2)this的取值与调用方式有关
			3)this的值在调用时候才能确定，并且一旦确定不能修改
		3.[__proto__]:当通过构造函数构建一个对象的时候，构造函数会在该对象的内部添加一个内部属性[[__proto__]]该属性指向原型对象
	(4)函数的属性
        .length: 表示函数希望接受的命名参数的个数(形参个数)
		function say(msg){} //say.length 1 希望接受一个参数
		function add(m,n){} //add.length 2 希望接受两个参数
        prototype: 指向函数的原型对象，保存实例方法的真正所在。在自定义引用数据类型以及继承时非常重要。
    (5)包装器函数
    	//所有引用数据类型才能继承Object
		//当调用一个基本数据类型变量的方法时，这时就将这个基本数据类型转换为引用数据类型--自动装箱
		var a = 1;	
			//a是基本数据类型
		console.log(a.toString());
			/*
				自动装箱 a = new Number(a);
				调用方法 a.toString()
			*/
		console.log(typeof a);


		String
		str.length
		str.charAt()  //返回给定位置的字符
		str.charCodeAt()
		str.concat()
		str.slice()
		str.substr()
		str.substring()
		str.indexOf()
		str.lasrIndexOf()
		str.trim()  //删除前置及后置中的所有空格，返回结果
		str.toLowerCase()
		str.toUpperCase() //转换成大写


4，面向对象
	1>自定义构造函数
		(1)工厂函数模式
		缺点：所创建出来的对象均为Object(),无法细分
			function studentFactory(no,name,age){
			var student = new Object();
			student.no = no;
			student.name = name;
			student.age = age;
			return student;
			}

			function studentFactory(no,name,age){
				var student = {
					no:no,
					name:name,
					age:age
				};
				return student;
			}

			var student1 = studentFactory(1001,"terry",12);
			console.log(student1);

		(2)构造函数模式


		(3)原型模式
		原型对象：
		任意一个函数都有一个与之对应的原型对象
		原型对象中的属性和方法可以供构造函数的所有实例共享，原因是所有的实例对象中都有一个指向原型对象的内部指针__proto__
			//构造函数
			function Student(){

			}
			//原型对象
			Student.prototype
			//原型对象中也有一个指针指向构造函数
			Student.prototype.construct ->Student

		(4)混合模式
			构造函数：属性
			原型对象：方法
			function Person(){
				this.属性1 = 值1;
				this.属性2 = 值2;
			}
			Person.prototype = {
				constructor:Person,
				方法1:function(){},
				方法2:function(){}
			};
		(5)检测
			某个对象是不是某个构造函数的实例
			stu1 instanceof Student 	//true
			stu1 instanceof Object		//true
			instance只有构造函数出现在实例的原型链中，都返回true
	2>继承
	(1)借用构造函数--代码级别的继承
	(2)原型链继承

<noscript>	当浏览器不支持脚本或者浏览器支持脚本，脚本被禁用，可以让页面平稳的退化</noscript>




5，DOM(Document,Object Model) 是针对XML但经过扩展用于HTML的应用程序编程接口(API).DOM将整个页面映射成一个多节点结构
	1>Node类型
		DOM中所有的节点对象都继承Node类型，Node原型中的方法其他的DOM节点都可以调用
		(1)节点关系
			属性：
				nodeType:节点类型
					Element 1;TextNode 3;Comment 8;Document 9
	    			document 是Document构造函数的实例
	    			document.body是Element构造函数的实例
	    			document.body.firstChild 是Comment构造函数的实例

	    	var arr = new Array();
			document->Document.prototype->Node.prototype.arr->Array.prototype->Object.prototype	

			Node.prototype{
				nodeType
				nodeName
				nodeValue
				childNodes  NodeList类数组对象
				parentNode
				nextsibling
				previousSibling
				firstChild
				lastChild
				ownerDocument

				hasChildNodes()
			}
		(2)操作节点
			appendChild()
			replaceChild()
			inserBefore()
			removeChild()

			cloneNode()
			normalize() //删除空白节点，会找到相邻的两个文本节点，并将他们合并为一个文本节点。

		(3)查找元素
				getElementById()
				getElementsByTagName()
				getElementsByName()
				getElementsByClassName()

	2>Element类型
		(1)HTML元素
		(2)作为文档树的文档
		(3)元素内容
			innerHTML
			textContent  //非IE
			innerText　　//IE

	3>Text类型：文本类型
	4>Comment类型: 注释类型

	5>事件
		事件三要素：
			事件目标（event target）
			事件处理程序(event handler)
			事件对象(event object)
		(1)事件流
			1.事件冒泡（IE事件流）
			2.事件捕获（Netscape事件流）
			3.DOM事件流（DOM2级事件）
				事件捕获：document->html->body
				事件目标：事件处理
				事件冒泡：div->body->html->document
		(2)事件处理程序
			1.HTML事件处理程序
				<input type="button" value="clickMe" onclick = "showMsg()">
				<script type="text/javascript">
					function showMsg(){
						alert("is clicked");
					}
				</script>
				缺点：
				1)时差问题，用户可能会在HTML元素以出现在页面上就触发相应的事件，但当时的事件处理程序有可能尚不具备执行的条件。
				2)这种扩展事件处理程序的作用域链在不同浏览器中会导致不同结果。
				3)HTML与JavaScript代码紧密耦合。

			2.DOM0级事件处理程序（属性绑定，简单，兼容性比较好）
				elementNode.onxxx = function(){}
				当xxx发生在elementNode上的时候，执行function,并且function中的this指向当前正在处理的节点
				var btn = document.getElementById("btn");
				btn.onclick = function(){
					alert('cliked');
				}
				btn.onclick = null;  //删除事件处理程序
				执行原理，当该事件源对象上发生对应的事件时候，该事件源对象调用事件处理程序。this为事件源对象。
			3.DOM2级事件处理程序(函数绑定，兼容性不好)
				非IE事件处理函数：
				addEventListener()	//事件绑定
				参数：
					要绑定的事件名 
		  			作为事件处理的函数
		 		 	布尔值：true在捕获阶段调用事件处理程序；false在冒泡阶段调用
				removeEventListener()	//事件解除
				currentTarget		当前目标
				target 				实际目标
				this				指向当前目标
				keyCode				按键编号
				preventDefault()	阻止默认行为
				stopPropagation()	停止事件冒泡
				IE事件处理程序：
				attachEvent() //事件绑定
					参数：
			  		事件处理程序名称
					事件处理函数
				事件处理程序都被添加到冒泡阶段
				detachEvent()	//事件解除
				srcElement  -> target目标元素
				this		-> 
					dom0 指向 当前元素currentTarget
					dom2 指向 window
				cancelBubble	值为true时取消冒泡
				returnValue		值为false阻止默认事件
			4.跨浏览器的事件处理程序
			<1>
			var EventUtil = {
			//添加事件
			addHandler : function
				(element,type,handler){
				if(element.addEventListener){
					element.addEventListener(type,handler,false);
				}else if(element.attachEvent){
					element.attachEvent("on"+type,handler)
				}else{
					element["on"+type]	= handler
				}
			},
			//移除事件
			removeHandler : function(element,type,handler){
				if(element.removeEventListener){
					element.removeEventListener(type,handler,false);
				} else if(element.detachEvent){
					element.detachEvent("on"+type,handler)
				} else{
					element["on"+type] = null;
				}
			},
			//返回事件对象
			getEvent: function(event){
				return event? event : window.event;
			},
			//获取目标
			getTarget:function(event){
				return event.target || event.srcElement;
			},
			//阻止默认行为
			preventDefault : function(event){
				if(event.preventDefault){
					event.preventDefault();
				}else{
					event.returnValue = false;
				}
			},
			//阻止事件冒泡
			stopPropagation : function(event){
				if(event.stopPropagation){
					event.stopPropagation();
				}else{
					event.cancelBubble = true;
					}
				}
				//
			}
			<2>
			var eventUtil = {
				/**
					@param src事件源，type事件类型，fn事件处理函数
				*/
				bind:function(src,type,fn){
					if(src.addEventListener){
						src.addEventListener(type,fn,false);
					}else if(src.attachEvent){
						src.attachEvent("on"+type,fn);
					}else{
						src["on"+type] = fn;
					}
				},
				unbind:function(src,type,fn){
					if(src.removeEventListener){
						src.removeEventListener(type,fn,false);
					}else if(src.detachEvent){
						src.detachEvent("on"+type,fn);
					}else {
						src["on"+type] = null;
						}
					}
				};

6，BOM（浏览器对象模型）
	1>间歇调用和超时调用
		javascript是单线程语言，但是可以通过超时值和间歇时间来调度代码在特定时刻执行
		(1)
		setTimeout(); //超时调用
		参数：
	 		 	1.要执行的代码
				2.以毫秒表示的时间
		clearTimeout();
		(2)
		setInterval();  //间歇调用
		参数：
	  			1.要执行的代码
				2.以毫秒表示的时间。
	  			clearInterval(ID);  //取消间歇调用
	 2>使用超时调用来模拟间歇调用
	 	var num =0;
	 	var max =10;
	 	function incrementNum(){
	 		num++;
	 		if(num<max){
	 			alert(num);
	 			setTimeout(incrementNum,500);
	 		}else{
	 			alert("Done"+num);
	 		}
	 	}
	 	setTimeout(incrementNum,500);
	 3>setTimeout，setInterval配合完成调用函数
	 	function(f,start,interval,end){
	 		if(!start){
	 			start=0;
	 		}
	 		if(arguments.length<=2){
	 			setTimeout(f,start);
	 		}else{
	 			function repeat(){
	 				var h=setInterval(f,interval);
	 				if(end){
	 					setTimeout(fucntion(){
	 						clearInterval(h);
	 					},end);
	 				}
	 			}
	 			setTimeout(repeat,start);
	 		}
	 	}
	 4>系统对话框
	 	alert(),confirm()确认对话框,prompt()会话框，提示用户输入一些文本
	 5>元素的显示和可见性
  		visibility:
			hidden  元素不可见，但是在文档布局中保留了它的空间。
			visible	元素可见
  		display	
			none	元素不可见，在文档布局中不给它分配空间，它的各边元素会合拢，就当它不存在过。在展开和折叠轮廓的效果时，display属性很有用。
  
  		不过visibility,display对绝对定位和固定定位的元素的影响是等价的。
  	 6>颜色，透明度
  		opacity 透明度：0~1之间的数字
  		filter: IE中表示透明度
		常用表示透明度的方法
		  		opacity: .75;
		  		filter:alpha(opacity=75)
7,设计模式
	1>递归
		函数表达式
		var functionName = function(arg0,arg1,arg2){
			//函数体
		}
		创建一个函数对象，并将其赋给functionName,这种函数称为匿名函数或者拉姆达函数。

		递归函数
		递归函数数在一个函数通过名字调用自身的情况下构成的
		<1>
		function factorial(num){
			if(num<1){
				return 1;
			}else{
				return num*arguments.callee(num-1);
				//return num*factorial(num-1);
			}
		};
		<2>
		var factorial =(function f(num){
			if(num<1){
				return 1;
			}else{
				return num*f(num-1);
				//return num*argument.callee(num-1);
			}
		});
	2>闭包
		(1)基本概念
		闭包是指有权访问另一个函数作用域中的变量的函数，代码块和创建该代码块的上下文中数据的结合
		闭包常见的创建方式是：在一个函数内部创建另外一个函数。
		【本质：闭包就是将函数内部和函数外部连接起来的一座桥梁。】
		用途：1.可以读数函数内部的变量
			  2.让一些变量的值始终保存在内存中

		var name = "The Window";
		var object ={
			name :"My Object",
			getNameFunc:function(){
				return function(){
					return this.name;
				};
			}
		};
		alert(object.getNameFunc()());

