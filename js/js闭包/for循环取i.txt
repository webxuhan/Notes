闭包
1.正确的说，应该是指一个闭包域，每当声明了一个函数，它就产生了一个闭包域(可以解释为每个函数都有自己的函数栈),每个闭包域(Function对象 )都有一个function scope(不是属性),function scope内默认有个名为Global的全局引用(有了这个引用,就可以直接调用Global的属性或方法)

2.凡是在闭包域内声明的变量或方法，外部无法直接访问

3.闭包域可以访问外部的变量或方法
	onclick:function anonymous()
	  arguments:null
	  caller:null
	  length:0
	  name:""
	prototype:Object
	__proto__:function()
	<function scope>
		Global:Window
	[此为chrome下debug环境]
当在一个闭包域内包含另一个闭包域时(简单的说就是在一个函数内有另一个函数，当然这个内部函数的生命周期依附于外部函数的)，此时，若子闭包域(内部的闭包域，内部函数)使用了父闭包域的私有变量(在父闭包域中声明的变量，父闭包的外部空间无法直接访问，但子闭包域可以直接访问)，子闭包域即当前的子函数的function scope会产生一个closure对象属性,这个对象属性内包含的是子闭包域对父闭包域的所有引用(只要子闭包域[内部函数]还存活,其父闭包域[外部函数]就依旧存活)，倘若在父闭包域存活期间对其私有变量内容进行修改，则对这些父闭包的私有变量进行引用的子闭包域中function scope 的closure对象的内容也会发生变化，因为这只是引用.
example--demo.html

4.闭包[闭包就是将函数内部和函数外部连接起来的一座桥梁]的用途:
<1>读取函数内部的变量
<2>让这些变量的值始终保持在内存中

5.使用闭包的注意点:
1>由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题。在IE中可能导致内存泄漏.解决方法是在退出函数之前，将不使用的局部变量全部删除.
2>闭包会在父函数外部,改变父函数内部变量的值。所以，如果你把父函数当作对象(object)使用，把闭包当作它的公用方法(Public Method),把内部变量当作它的私有属性(private value),这时一定要小心,不要随便改变父函数内部变量的值.
