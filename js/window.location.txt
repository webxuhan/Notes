window.location是一个只读属性，返回一个location对象，包含当前地址的信息.

语法：
	var oldLocation = window.location;
	window.location = newLocation;

exp1:导航到一个新的页面
window.location.assign("http://www.xx.com");//or
window.location ="http://www.xx.com";

exp2:强制从服务器重新加载当前页面
window.location.reload(true);

exp3:使用replace()方法重新加载页面
function reloadPageWithHash(){
	var initialPage = window.location.pathname;
	window.location.replace("http://example.com/#"+initialPage);
}

exp4:弹出警告框，显示当前url属性
function showLoc(){
	var 
		oLocation = window.location,
		aLog = ["Property(typeof):Value","window.location ("+(typeof oLocation)+"):"+oLocation];
	for(var sProp in oLocation){
		aLog.push(sProp+" ("+(typeof oLocation[sProp])+"): "+(oLocation[sProp] || "n/a"));
	}
	alert(aLog.join("\n"));
}
// in html: <button onclick="showLoc();">Show location properties</button>

exp5:通过修改search属性向服务器发送字符串数据
function sendData(sData){
	window.location.search  = sData;
}
//in html: <button onclick="sendData("Some data");">Send data</button>
当前 URL 带上 "?Some%20data"，被发送到服务端（如果服务端不处理，则使用修改后的查询字符串 [search string] 重新加载当前文档）。

exp6:获取一个window.location.search键值(key-value)
function loadPageVar (sVar) {
  return decodeURI(window.location.search.replace(new RegExp("^(?:.*[&\\?]" + encodeURI(sVar).replace(/[\.\+\*]/g, "\\$&") + "(?:\\=([^&]*))?)?.*$", "i"), "$1"));
}

alert(loadPageVar("name"));

例子#7：通过 window.location.search 字符串获取查询参数，存入对象 oGetVars 中：
例子#8：通过 window.location.search 字符串获取查询参数，存入对象 oGetVars 中，并尝试识别参数类型（typeof）：
例子#9：不改变 window.location.hash 属性情况下使用书签：

参考网站
https://developer.mozilla.org/zh-CN/docs/Web/API/Window/location